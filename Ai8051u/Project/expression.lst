C251 COMPILER V5.60.0,  expression                                                         27/11/24  19:44:34  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE expression
OBJECT MODULE PLACED IN ..\obj\expression.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\USER\expression.c XSMALL INTR2 BROWSE INCDIR(..\GUI;..\LCD;..\sys;.
                    -.\touch;..\USER;..\TinyMaix;TinyMaix;..\font;.;..\TinyMaix) DEBUG PRINT(.\expression.lst) TABS(2) OBJECT(..\obj\expressi
                    -on.obj) 

stmt  level    source

    1          #include "expression.h"
    2          #include <stdio.h>
    3          #include <stdlib.h>  // For atoi function
    4          
    5          #define MAX_SIZE 16
    6          
    7          // 用栈处理运算符优先级
    8          typedef struct {
    9              float _data[MAX_SIZE];  // 使用 float 类型以支持浮点数
   10              int32_t top;
   11          } Stack;
   12          
   13          static void push(Stack *stack, float value) {
   14   1          if (stack->top < MAX_SIZE - 1) {
   15   2              stack->_data[++(stack->top)] = value;
   16   2          }
   17   1      }
   18          
   19          static float pop(Stack *stack) {
   20   1          if (stack->top >= 0) {
   21   2              return stack->_data[(stack->top)--];
   22   2          }
   23   1          return 0.0f; // 空栈返回 0
   24   1      }
   25          
   26          static float peek(Stack *stack) {
   27   1          if (stack->top >= 0) {
   28   2              return stack->_data[stack->top];
   29   2          }
   30   1          return 0.0f;
   31   1      }
   32          
   33          static int32_t getPriority(uint8_t op) {
   34   1          if (op == 10 || op == 11) { // 加法和减法
   35   2              return 1;
   36   2          }
   37   1          if (op == 12 || op == 13) { // 乘法和除法
   38   2              return 2;
   39   2          }
   40   1          return 0;
   41   1      }
   42          
   43          float expression_calc(uint8_t item[], uint8_t n) {
   44   1          Stack numStack, opStack;
   45   1          float current, left, right, result;
   46   1          uint8_t op;
   47   1          uint8_t i;
   48   1          numStack.top = -1;  // 初始化栈为空
   49   1          opStack.top = -1;
   50   1      
   51   1          result = 0.0f; // 初始化结果为 0.0
   52   1      
   53   1          i = 0;
   54   1          while (i < n) {
   55   2              current = item[i];
   56   2      
   57   2              // 如果当前是数字 (0-9)，可能是多位数的一部分
C251 COMPILER V5.60.0,  expression                                                         27/11/24  19:44:34  PAGE 2   

   58   2              if (current >= 0 && current <= 9) {
   59   3                  // 处理连续的数字组成多位数
   60   3                  int32_t number = current;
   61   3                  i++;
   62   3                  while (i < n && item[i] >= 0 && item[i] <= 9) {
   63   4                      number = number * 10 + item[i];
   64   4                      i++;
   65   4                  }
   66   3                  push(&numStack, (float)number);  // 将组合后的数字入栈
   67   3              }
   68   2              // 如果当前是运算符 (10-13)
   69   2              else if (current >= 10 && current <= 13) {
   70   3                  while (opStack.top >= 0 && getPriority(peek(&opStack)) >= getPriority(current)) {
   71   4                      right = pop(&numStack);
   72   4                      left = pop(&numStack);
   73   4                      op = pop(&opStack);
   74   4      
   75   4                      switch (op) {
   76   5                          case 10: left += right; break;  // 加法
   77   5                          case 11: left -= right; break;  // 减法
   78   5                          case 12: left *= right; break;  // 乘法
   79   5                          case 13: 
   80   5                              if (right == 0.0f) {
   81   6                                  printf("除数不能为0!\n");
   82   6                                  return 0.0f;  // 防止除以零
   83   6                              }
   84   5                              left /= right; break;  // 除法
   85   5                      }
   86   4                      push(&numStack, left);
   87   4                  }
   88   3                  push(&opStack, current);  // 当前运算符入栈
   89   3                  i++;
   90   3              }
   91   2          }
   92   1      
   93   1          // 处理剩余的运算符
   94   1          while (opStack.top >= 0) {
   95   2              right = pop(&numStack);
   96   2              left = pop(&numStack);
   97   2              op = pop(&opStack);
   98   2      
   99   2              switch (op) {
  100   3                  case 10: left += right; break;  // 加法
  101   3                  case 11: left -= right; break;  // 减法
  102   3                  case 12: left *= right; break;  // 乘法
  103   3                  case 13: 
  104   3                      if (right == 0.0f) {
  105   4                          printf("除数不能为0!\n");
  106   4                          return 0.0f;  // 防止除以零
  107   4                      }
  108   3                      left /= right; break;  // 除法
  109   3              }
  110   2              push(&numStack, left);
  111   2          }
  112   1      
  113   1          return pop(&numStack);  // 最终结果
  114   1      }
  115          
  116          
  117          void expression_to_string(uint8_t *expression, uint8_t expr_length, uint8_t *buffer) {
  118   1          uint8_t i;
  119   1          uint8_t buffer_index = 0;
  120   1      
  121   1          // 遍历表达式数组
  122   1          for (i = 0; i < expr_length; i++) {
  123   2              char ch;
C251 COMPILER V5.60.0,  expression                                                         27/11/24  19:44:34  PAGE 3   

  124   2      
  125   2              // 根据表达式数组中的值选择相应的字符
  126   2              if (expression[i] >= 0 && expression[i] <= 9) {
  127   3                  ch = '0' + expression[i];
  128   3              } else if (expression[i] == 10) {
  129   3                  ch = '+';
  130   3              } else if (expression[i] == 11) {
  131   3                  ch = '-';
  132   3              } else if (expression[i] == 12) {
  133   3                  ch = '*';
  134   3              } else if (expression[i] == 13) {
  135   3                  ch = '/';
  136   3              } else {
  137   3                  // 如果遇到无效的数字，跳过
  138   3                  continue;
  139   3              }
  140   2              buffer[buffer_index++] = ch;
  141   2          }
  142   1      
  143   1          // 确保缓冲区以空字符结尾
  144   1          buffer[buffer_index] = '\0';
  145   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       880     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------        159
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        12     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

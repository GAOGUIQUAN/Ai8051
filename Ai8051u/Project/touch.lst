C251 COMPILER V5.60.0,  touch                                                              11/03/25  16:01:48  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE touch
OBJECT MODULE PLACED IN ..\obj\touch.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\touch\touch.c XSMALL INTR2 BROWSE INCDIR(..\GUI;..\LCD;..\sys;..\to
                    -uch;..\USER;..\TinyMaix;TinyMaix;..\font;.;..\TinyMaix) DEBUG PRINT(.\touch.lst) TABS(2) OBJECT(..\obj\touch.obj) 

stmt  level    source

    1          /*---------------------------------------------------------------------*/
    2          /* --- Web: www.STCAI.com ---------------------------------------------*/
    3          /* 液晶屏驱动程序参考wiki技术网站提供的开源源码，仅供学习使用          */
    4          /*---------------------------------------------------------------------*/
    5          
    6          //=========================================电源接线================================================//
    7          //VDD接DC 3.3V电源
    8          //GND接地
    9          //=======================================液晶屏数据线接线==========================================//
   10          //本模块数据总线类型为8位并口
   11          // LCD_D0~D7     接       P20~P27        //液晶屏8位数据线
   12          //=======================================液晶屏控制线接线==========================================//
   13          // LCD_RS        接        P45           //数据/命令选择控制信号
   14          // LCD_RD        接        P37           //读控制信号
   15          // LCD_RST       接        P47           //复位信号
   16          // LCD_WR        接        P36           //写控制信号
   17          // LCD_CS        接        P05/P53       //片选控制信号
   18          //================================================================================================//
   19          //不使用触摸或者模块本身不带触摸，则可不连接
   20          //触摸屏使用的数据总线类型为SPI
   21          //  T_CS         接        P15          //触摸屏片选控制信号
   22          //  T_CLK        接        P32          //触摸屏SPI时钟信号
   23          //  T_DO         接        P33          //触摸屏SPI读信号
   24          //  T_DIN        接        P34          //触摸屏SPI写信号
   25          //  T_IRQ        接        P14          //触摸屏响应检查信号
   26          //================================================================================================//
   27          // 本实验使用的2.4寸320*240的并口彩屏，由冲哥淘宝店提供：http://e.tb.cn/h.gIlbVqAOj8YXlwo?tk=vFIr3RGTy2n
   28          //**************************************************************************************************/
   29          #include "sys.h"
   30          #include "touch.h"
   31          #include "lcd.h"
   32          #include "gui.h"
   33          
   34          //***因触摸屏批次不同等原因，默认的校准参数值可能会引起触摸识别不准，建议校准后再使用，不建议使用固定的默
             -认校准参数
   35          u16 vx=15621,vy=11221;  //比例因子，此值除以1000之后表示多少个AD值代表一个像素点 
   36          u16 chx=3890,chy=340;//默认像素点坐标为0时的AD起始值 
   37          //***因触摸屏批次不同等原因，默认的校准参数值可能会引起触摸识别不准，建议校准后再使用，不建议使用固定的默
             -认校准参数
   38          
   39          struct tp_pix_  tp_pixad,tp_pixlcd;     //当前触控坐标的AD值,前触控坐标的像素值   
   40          
   41          //返回触摸按下的状态
   42          u8 tpstate(void)
   43          {
   44   1          return Penirq;
   45   1      }
   46          
   47          //SPI开始
   48          void spistar(void)                                     
   49          {
   50   1          TCS=1;
   51   1          DCLK=1;
   52   1          DIN=1;
   53   1          DCLK=1;
   54   1      }
   55          
   56          //SPI写数据
C251 COMPILER V5.60.0,  touch                                                              11/03/25  16:01:48  PAGE 2   

   57          void WriteCharTo7843(unsigned char num)          
   58          {
   59   1          unsigned char count=0;
   60   1          DCLK=0;
   61   1          for(count=0;count<8;count++)
   62   1          {
   63   2              num<<=1;
   64   2              DIN=CY;
   65   2              DCLK=0; _nop_();_nop_();_nop_();                //上升沿有效
   66   2              DCLK=1; _nop_();_nop_();_nop_();
   67   2          }
   68   1      }
   69          
   70          //SPI 读数据
   71          u16 ReadFromCharFrom7843()             
   72          {
   73   1          u8 count=0;
   74   1          u16 Num=0;
   75   1          for(count=0;count<12;count++)
   76   1          {
   77   2              Num<<=1;        
   78   2              DCLK=1; _nop_();_nop_();_nop_();   //下降沿有效
   79   2              DCLK=0; _nop_();_nop_();_nop_();
   80   2              if(DOUT)
   81   2              {
   82   3                  Num|=1;
   83   3              }
   84   2          }
   85   1      
   86   1          return(Num);
   87   1      }
   88          
   89          //从7846/7843/XPT2046/UH7843/UH7846读取adc值      
   90          //0x90=y   0xd0-x
   91          u16 ADS_Read_AD(unsigned char CMD)          
   92          {
   93   1          u16 l;
   94   1          TCS=0;
   95   1          WriteCharTo7843(CMD);        //送控制字即用差分方式读X坐标 详细请见有关资料
   96   1          DCLK=1; _nop_();_nop_();_nop_();_nop_();
   97   1          DCLK=0; _nop_();_nop_();_nop_();_nop_();
   98   1          l=ReadFromCharFrom7843();
   99   1          TCS=1;
  100   1          return l;
  101   1      }
  102          
  103          //读取一个坐标值
  104          //连续读取READ_TIMES次数据,对这些数据升序排列,
  105          //然后去掉最低和最高LOST_VAL个数,取平均值 
  106          #define READ_TIMES 15 //读取次数
  107          #define LOST_VAL 5      //丢弃值
  108          u16 ADS_Read_XY(u8 xy)
  109          {
  110   1          u16 i, j;
  111   1          u16 buf[READ_TIMES];
  112   1          u16 sum=0;
  113   1          u16 temp;
  114   1          for(i=0;i<READ_TIMES;i++)
  115   1          {                 
  116   2              buf[i]=ADS_Read_AD(xy);        
  117   2          }                    
  118   1          for(i=0;i<READ_TIMES-1; i++)//排序
  119   1          {
  120   2              for(j=i+1;j<READ_TIMES;j++)
  121   2              {
  122   3                  if(buf[i]>buf[j])//升序排列
C251 COMPILER V5.60.0,  touch                                                              11/03/25  16:01:48  PAGE 3   

  123   3                  {
  124   4                      temp=buf[i];
  125   4                      buf[i]=buf[j];
  126   4                      buf[j]=temp;
  127   4                  }
  128   3              }
  129   2          }      
  130   1          sum=0;
  131   1          for(i=LOST_VAL;i<READ_TIMES-LOST_VAL;i++)sum+=buf[i];
  132   1          temp=sum/(READ_TIMES-2*LOST_VAL);
  133   1          return temp;   
  134   1      }
  135          
  136          //带滤波的坐标读取
  137          //最小值不能少于100.
  138          u8 Read_ADS(u16 *x,u16 *y)
  139          {
  140   1          u16 xtemp,ytemp;                            
  141   1          xtemp=ADS_Read_XY(CMD_RDX);
  142   1          ytemp=ADS_Read_XY(CMD_RDY);                                            
  143   1          if(xtemp<100||ytemp<100)return 0;//读数失败
  144   1          *x=xtemp;
  145   1          *y=ytemp;
  146   1          return 1;//读数成功
  147   1      }
  148          
  149          //2次读取ADS7846,连续读取2次有效的AD值,且这两次的偏差不能超过
  150          //50,满足条件,则认为读数正确,否则读数错误.       
  151          //该函数能大大提高准确度
  152          #define ERR_RANGE 20 //误差范围 
  153          u8 Read_ADS2(u16 *x,u16 *y) 
  154          {
  155   1          u16 x1,y1;
  156   1           u16 x2,y2;
  157   1           u8 flag;    
  158   1          flag=Read_ADS(&x1,&y1);   
  159   1          if(flag==0)return(0);
  160   1          flag=Read_ADS(&x2,&y2);    
  161   1          if(flag==0)return(0);   
  162   1          if(((x2<=x1&&x1<x2+ERR_RANGE)||(x1<=x2&&x2<x1+ERR_RANGE))//前后两次采样在+-ERR_RANGE内
  163   1          &&((y2<=y1&&y1<y2+ERR_RANGE)||(y1<=y2&&y2<y1+ERR_RANGE)))
  164   1          {
  165   2              *x=(x1+x2)>>1;
  166   2              *y=(y1+y2)>>1;        
  167   2              return 1;
  168   2          }else return 0;      
  169   1      }
  170          
  171          //精确读取一次坐标,校准的时候用的       
  172          u8 Read_TP_Once(void)
  173          {
  174   1          u8 re=0;
  175   1          u16 x1,y1;
  176   1          while(re==0)
  177   1          {
  178   2              while(!Read_ADS2(&tp_pixad.x,&tp_pixad.y));
  179   2              delay_ms(10);
  180   2              while(!Read_ADS2(&x1,&y1));
  181   2              if(tp_pixad.x==x1&&tp_pixad.y==y1)
  182   2              {
  183   3                  re=1; 
  184   3              }
  185   2          } 
  186   1          return re;
  187   1      }
  188          
C251 COMPILER V5.60.0,  touch                                                              11/03/25  16:01:48  PAGE 4   

  189          //画一个校准用的辅助触摸区域
  190          void Drow_Touch_Point(u16 x,u16 y)
  191          {
  192   1          POINT_COLOR=RED;
  193   1          LCD_DrawLine(x-12,y,x+13,y);//横线
  194   1          LCD_DrawLine(x,y-12,x,y+13);//竖线
  195   1          LCD_DrawPoint(x+1,y+1);
  196   1          LCD_DrawPoint(x-1,y+1);
  197   1          LCD_DrawPoint(x+1,y-1);
  198   1          LCD_DrawPoint(x-1,y-1);
  199   1          gui_circle(x,y,POINT_COLOR,6,0);//画中心圈
  200   1      }
  201          
  202          //画一个大点(2*2的点)           
  203          //x,y:坐标
  204          //color:颜色
  205          void TP_Draw_Big_Point(u16 x,u16 y,u16 color)
  206          {       
  207   1          POINT_COLOR=color;
  208   1          
  209   1          LCD_DrawPoint(x,y);//中心点 
  210   1          LCD_DrawPoint(x+1,y);
  211   1          LCD_DrawPoint(x,y+1);
  212   1          LCD_DrawPoint(x+1,y+1);               
  213   1      }
  214          
  215          //转换结果
  216          //根据触摸屏的校准参数来决定转换后的结果,保存在tp_pixlcd.x,tp_pixlcd.y中
  217          u8 Convert_Pos(void)
  218          {    
  219   1          #if USE_HORIZONTAL==1
  220   1          u16 temp; 
  221   1          #endif      
  222   1          u8 l=0;
  223   1          
  224   1          if(Read_ADS2(&tp_pixad.x,&tp_pixad.y))
  225   1          {
  226   2              l=1;
  227   2              tp_pixlcd.x=tp_pixad.x>chx?((u32)tp_pixad.x-(u32)chx)*1000/vx:((u32)chx-(u32)tp_pixad.x)*1000/vx;
  228   2              tp_pixlcd.y=tp_pixad.y>chy?((u32)tp_pixad.y-(u32)chy)*1000/vy:((u32)chy-(u32)tp_pixad.y)*1000/vy;
  229   2              
  230   2              #if USE_HORIZONTAL==0
                       tp_pixlcd.y=lcddev.height-1-tp_pixlcd.y; //Y坐标镜像 
                       #elif USE_HORIZONTAL==1
  233   2              temp=tp_pixlcd.x;
  234   2              tp_pixlcd.x=tp_pixlcd.y;
  235   2              tp_pixlcd.y=lcddev.height-temp;
  236   2              tp_pixlcd.x=lcddev.width-1-tp_pixlcd.x;
  237   2              #endif 
  238   2          }
  239   1          return l;
  240   1      }
  241          
  242          //触摸屏校准代码
  243          //得到四个校准参数
  244          #define tp_pianyi 50   //校准坐标偏移量    
  245          #define tp_xiaozhun 1000   //校准精度
  246          void Touch_Adjust(void)
  247          {    
  248   1          float vx1,vx2,vy1,vy2;  //比例因子，此值除以1000之后表示多少个AD值代表一个像素点
  249   1          u16 chx1,chx2,chy1,chy2;//默认像素点坐标为0时的AD起始值
  250   1          u16 lx,ly;                 
  251   1          struct tp_pixu32_ p[4];
  252   1          u8  cnt=0;     
  253   1          cnt=0;                
  254   1      
C251 COMPILER V5.60.0,  touch                                                              11/03/25  16:01:48  PAGE 5   

  255   1          TCS=1;
  256   1          DCLK=1;
  257   1          DIN=1;
  258   1          DCLK=1;
  259   1          
  260   1          POINT_COLOR=BLUE;
  261   1          BACK_COLOR =WHITE;
  262   1          LCD_Clear(WHITE);//清屏   
  263   1          POINT_COLOR=RED;//红色 
  264   1          LCD_Clear(WHITE);//清屏 
  265   1          Drow_Touch_Point(tp_pianyi,tp_pianyi);//画点1 
  266   1          while(1)
  267   1          {
  268   2              if(Penirq==0)//按键按下了
  269   2              {
  270   3                  if(Read_TP_Once())//得到单次按键值
  271   3                  {                                     
  272   4                      p[cnt].x=tp_pixad.x;
  273   4                      p[cnt].y=tp_pixad.y;
  274   4                      cnt++; 
  275   4                  }             
  276   3                  switch(cnt)
  277   3                  {               
  278   4                      case 1:
  279   4                          LCD_Clear(WHITE);//清屏 
  280   4                          while(!Penirq);  //等待松手
  281   4                          Drow_Touch_Point(lcddev.width-tp_pianyi-1,tp_pianyi);//画点2
  282   4                          break;
  283   4                      case 2:
  284   4                          LCD_Clear(WHITE);//清屏 
  285   4                          while(!Penirq);  //等待松手
  286   4                          Drow_Touch_Point(tp_pianyi,lcddev.height-tp_pianyi-1);//画点3
  287   4                          break;
  288   4                      case 3:
  289   4                          LCD_Clear(WHITE);//清屏 
  290   4                          while(!Penirq);  //等待松手
  291   4                          Drow_Touch_Point(lcddev.width-tp_pianyi-1,lcddev.height-tp_pianyi-1);//画点4
  292   4                          break;
  293   4                      case 4:     //全部四个点已经得到
  294   4                          LCD_Clear(WHITE);//清屏 
  295   4                          while(!Penirq);  //等待松手
  296   4                  
  297   4                          #if USE_HORIZONTAL==1
  298   4                          vx1=p[1].y>p[0].y?(p[1].y-p[0].y+1)*1000/(lcddev.width-tp_pianyi-tp_pianyi):(p[0].y-p
             -[1].y-1)*1000/(lcddev.width-tp_pianyi-tp_pianyi);
  299   4                           chx1=p[1].y>p[0].y?p[0].y-(vx1*tp_pianyi)/1000:p[1].y-(vx1*tp_pianyi)/1000;
  300   4                             vy1=p[2].x>p[0].x?(p[2].x-p[0].x-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi):(p[0]
             -.x-p[2].x-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi);
  301   4                          chy1=p[2].x>p[0].x?p[2].x+(vy1*tp_pianyi)/1000:p[0].x+(vy1*tp_pianyi)/1000; 
  302   4                          
  303   4                          vx2=p[3].y>p[2].y?(p[3].y-p[2].y+1)*1000/(lcddev.width-tp_pianyi-tp_pianyi):(p[2].y-p
             -[3].y-1)*1000/(lcddev.width-tp_pianyi-tp_pianyi);
  304   4                          chx2=p[3].y>p[2].y?p[2].y-(vx2*tp_pianyi)/1000:p[3].y-(vx2*tp_pianyi)/1000;
  305   4                             vy2=p[3].x>p[1].x?(p[3].x-p[1].x-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi):(p[1]
             -.x-p[3].x-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi);
  306   4                          chy2=p[3].x>p[1].x?p[3].x+(vy2*tp_pianyi)/1000:p[1].x+(vy2*tp_pianyi)/1000; 
  307   4                          #elif USE_HORIZONTAL==0
                                   vx1=p[1].x>p[0].x?(p[1].x-p[0].x+1)*1000/(lcddev.width-tp_pianyi-tp_pianyi):(p[0].x-p
             -[1].x-1)*1000/(lcddev.width-tp_pianyi-tp_pianyi);
                                    chx1=p[1].x>p[0].x?p[1].x+(vx1*tp_pianyi)/1000:p[0].x+(vx1*tp_pianyi)/1000;
                                      vy1=p[2].y>p[0].y?(p[2].y-p[0].y-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi):(p[0]
             -.y-p[2].y-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi);
                                   chy1=p[2].y>p[0].y?p[0].y-(vy1*tp_pianyi)/1000:p[2].y-(vy1*tp_pianyi)/1000; 
                                   
                                   vx2=p[3].x>p[2].x?(p[3].x-p[2].x+1)*1000/(lcddev.width-tp_pianyi-tp_pianyi):(p[2].x-p
             -[3].x-1)*1000/(lcddev.width-tp_pianyi-tp_pianyi);
C251 COMPILER V5.60.0,  touch                                                              11/03/25  16:01:48  PAGE 6   

                                   chx2=p[3].x>p[2].x?p[3].x+(vx2*tp_pianyi)/1000:p[2].x+(vx2*tp_pianyi)/1000;
                                      vy2=p[3].y>p[1].y?(p[3].y-p[1].y-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi):(p[1]
             -.y-p[3].y-1)*1000/(lcddev.height-tp_pianyi-tp_pianyi);
                                   chy2=p[3].y>p[1].y?p[1].y-(vy2*tp_pianyi)/1000:p[3].y-(vy2*tp_pianyi)/1000; 
                                   
                                   #endif
  319   4      
  320   4                          if((vx1>vx2&&vx1>vx2+tp_xiaozhun)||(vx1<vx2&&vx1<vx2-tp_xiaozhun)||(vy1>vy2&&vy1>vy2+
             -tp_xiaozhun)||(vy1<vy2&&vy1<vy2-tp_xiaozhun))
  321   4                          {
  322   5                              cnt=0;
  323   5                              LCD_Clear(WHITE);//清屏 
  324   5                              Drow_Touch_Point(tp_pianyi,tp_pianyi);//画点1 
  325   5                              continue;
  326   5                          }
  327   4                          #if USE_HORIZONTAL==1
  328   4                          vx=(vy1+vy2)/2;vy=(vx1+vx2)/2;
  329   4                          chx=(chy1+chy2)/2;chy=(chx1+chx2)/2;    
  330   4                          #elif USE_HORIZONTAL==0
                                   vx=(vx1+vx2)/2;vy=(vy1+vy2)/2;
                                   chx=(chx1+chx2)/2;chy=(chy1+chy2)/2;    
                                   #endif
  334   4                          //显示校准信息
  335   4                          LCD_Clear(WHITE);//清屏 
  336   4                          POINT_COLOR=BLACK;
  337   4                          BACK_COLOR=BLUE;    
  338   4                          lx=50;ly=50;            
  339   4                          LCD_ShowString(lx,ly,16,"VX:",1);lx+=40;LCD_ShowNum(lx,ly,vx,6,16);                  
             -  
  340   4                          lx=50;ly+=20;
  341   4                          LCD_ShowString(lx,ly,16,"Vy:",1);lx+=40;LCD_ShowNum(lx,ly,vy,6,16);                  
             -  
  342   4                          lx=50;ly+=20; 
  343   4                          LCD_ShowString(lx,ly,16,"CHX:",1);lx+=40;LCD_ShowNum(lx,ly,chx,6,16);                
             -    
  344   4                          lx=50;ly+=20; 
  345   4                          LCD_ShowString(lx,ly,16,"CHY:",1);lx+=40;LCD_ShowNum(lx,ly,chy,6,16);
  346   4      
  347   4                          lx=30;ly+=30;
  348   4                          LCD_ShowString(lx,ly,16,"Adjust OK!",1);    
  349   4                          lx=30;ly+=30;
  350   4                          LCD_ShowString(lx,ly,16,"Touch Anywhere To Continue",1);                             
             -             
  351   4                          Read_TP_Once(); //等待任意键后继续
  352   4      
  353   4                          LCD_Clear(WHITE);//清屏
  354   4                          return;//校正完成                 
  355   4                  }
  356   3              }
  357   2          } 
  358   1      }
  359                      


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2057     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        16        110
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
C251 COMPILER V5.60.0,  touch                                                              11/03/25  16:01:48  PAGE 7   

  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        80     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
